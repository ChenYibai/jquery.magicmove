// Generated by CoffeeScript 1.6.3
(function() {
  var $, defaults, difference, eql, intersect, magicMove, mmIndex;

  $ = jQuery;

  defaults = {
    selector: '> *',
    visibleStyle: {
      opacity: 1,
      transform: 'scale(1)'
    },
    hiddenStyle: {
      opacity: 0,
      transform: 'scale(0.001)'
    }
  };

  mmIndex = 'mmIndex';

  eql = function(nodeA, nodeB) {
    var nodeAIndex, nodeBIndex;
    nodeAIndex = nodeA[mmIndex];
    nodeBIndex = nodeB[mmIndex];
    if (nodeAIndex == null) {
      return false;
    }
    if (nodeBIndex == null) {
      return false;
    }
    return nodeAIndex === nodeBIndex;
  };

  difference = function(nodesA, nodesB) {
    return nodesA.filter(function(nodeA) {
      var nodeB, _i, _len;
      for (_i = 0, _len = nodesB.length; _i < _len; _i++) {
        nodeB = nodesB[_i];
        if (eql(nodeA, nodeB)) {
          return false;
        }
      }
      return true;
    });
  };

  intersect = function(nodesA, nodesB) {
    return nodesA.filter(function(nodeA) {
      var nodeB, _i, _len;
      for (_i = 0, _len = nodesB.length; _i < _len; _i++) {
        nodeB = nodesB[_i];
        if (eql(nodeA, nodeB)) {
          return true;
        }
      }
      return false;
    });
  };

  magicMove = function(options, callback) {
    var $added, $changed, $clone, $cloneNodes, $el, $elNodes, $nodes, $removed, index, node, _i, _len;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = $.extend({}, defaults, options);
    $el = $(this);
    $nodes = $el.find(options.selector);
    for (index = _i = 0, _len = $nodes.length; _i < _len; index = ++_i) {
      node = $nodes[index];
      node[mmIndex] = index;
    }
    $clone = $el.clone(true, true);
    $clone.css({
      position: 'absolute',
      left: '-1000px',
      top: '-1000px'
    }).appendTo('body');
    callback.call($clone, $clone, options);
    $cloneNodes = $clone.find(options.selector);
    $elNodes = $el.find(options.selector);
    $added = difference($cloneNodes, $elNodes);
    $removed = difference($elNodes, $cloneNodes);
    $changed = intersect($elNodes, $cloneNodes);
    debugger;
  };

  $.fn.magicMove = magicMove;

}).call(this);
